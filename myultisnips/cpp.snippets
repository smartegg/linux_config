extends c

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`} {
  public:
    ${1/(\w+).*/$1/} (${2:arguments});
    virtual ~${1/(\w+).*/$1/} ();

  private:
    ${1/(\w+).*/$1/}(const $1 &);
    const $1& operator=(const $1 &);
	  ${0:/* data */}
};
endsnippet

snippet na "namespace .. (namespace)"
namespace $1 {
	$0
} //namespace $1
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet



################# MY DIY   ##########
snippet once "Include header once c++ only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
    snip.rv = snip.c`}
#define $1

${0}

#endif // $1

endsnippet


snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.hpp'`}"
endsnippet

snippet try "try" !b
try {
  ${0}
} 
catch(std::exception& e) {
  std::cerr << e.what() << std::endl;
}
endsnippet


# vim:ft=snippets:
